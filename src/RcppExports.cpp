// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fn_contribParity
double fn_contribParity(NumericVector& x, NumericMatrix& Sigma);
RcppExport SEXP _optimist_fn_contribParity(SEXP xSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_contribParity(x, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// gr_contribParity
NumericVector gr_contribParity(NumericVector& x, NumericMatrix& Sigma);
RcppExport SEXP _optimist_gr_contribParity(SEXP xSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gr_contribParity(x, Sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_optimist_fn_contribParity", (DL_FUNC) &_optimist_fn_contribParity, 2},
    {"_optimist_gr_contribParity", (DL_FUNC) &_optimist_gr_contribParity, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_optimist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
